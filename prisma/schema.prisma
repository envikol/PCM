// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Equipment {
  id              String    @id @default(uuid())
  code            String    @unique // ex: c1, C05
  name            String    // ex: CUBO (C1)
  type            String    // MÃ¡quina/Equipamento
  powerCV         Float?
  amperage        Float?
  powerKW         Float?
  capacity        String?
  energyCostHour  Float?
  nr12Compliant   Boolean   @default(false)
  popAvailable    Boolean   @default(false)
  equipmentValue  Float?
  manufacturingYear DateTime?
  model           String?
  serialNumber    String?
  observations    String?
  
  // Relations
  sector          Sector?    @relation(fields: [sectorId], references: [id])
  sectorId        String?
  operators       EquipmentOperator[]
  workOrders      WorkOrder[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("equipment")
}

model Sector {
  id          String      @id @default(uuid())
  name        String      @unique
  equipment   Equipment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("sectors")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String?   @unique
  role        String
  active      Boolean   @default(true)
  workOrders  WorkOrder[]
  equipments  EquipmentOperator[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users")
}

model EquipmentOperator {
  equipment     Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId   String
  operator      User      @relation(fields: [operatorId], references: [id])
  operatorId    String
  createdAt     DateTime  @default(now())

  @@id([equipmentId, operatorId])
  @@map("equipment_operators")
}

model WorkOrder {
  id                String    @id @default(uuid())
  number            Int       @unique @default(autoincrement())
  openedAt          DateTime
  deadline          DateTime
  completedAt       DateTime?
  serviceCost       Float?
  materialCost      Float?
  otherCosts        Float?
  serviceTime       String?   // Stored as string in format "HH:mm"
  observations      String?
  partsUsed         String?
  deadlineObs       String?   // ATRASADO, SHOW, etc
  
  // Relations
  equipment         Equipment          @relation(fields: [equipmentId], references: [id])
  equipmentId       String
  responsible       User               @relation(fields: [responsibleId], references: [id])
  responsibleId     String
  priority          Priority           @relation(fields: [priorityId], references: [id])
  priorityId        String
  maintenanceType   MaintenanceType    @relation(fields: [maintenanceTypeId], references: [id])
  maintenanceTypeId String
  maintenanceArea   MaintenanceArea    @relation(fields: [maintenanceAreaId], references: [id])
  maintenanceAreaId String
  status            Status             @relation(fields: [statusId], references: [id])
  statusId          String

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("work_orders")
}

model Priority {
  id          String      @id @default(uuid())
  name        String      @unique
  color       String?
  workOrders  WorkOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("priorities")
}

model MaintenanceType {
  id          String      @id @default(uuid())
  name        String      @unique
  workOrders  WorkOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("maintenance_types")
}

model MaintenanceArea {
  id          String      @id @default(uuid())
  name        String      @unique
  workOrders  WorkOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("maintenance_areas")
}

model Status {
  id          String      @id @default(uuid())
  name        String      @unique
  color       String?
  workOrders  WorkOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("status")
}
